{
    "name": "fracturedjsonvsc",
    "displayName": "FracturedJson",
    "description": "A JSON formatter that produces human-readable but fairly compact output.",
    "publisher": "j-brooke",
    "version": "3.0.0",
    "engines": {
        "vscode": "^1.57.0"
    },
    "categories": [
        "Formatters"
    ],
    "keywords": [
        "JSON",
        "JSONC",
        "formatter",
        "pretty printer",
        "beautifier",
        "stringify",
        "comments"
    ],
    "repository": {
        "url": "https://github.com/j-brooke/FracturedJsonVSC"
    },
    "homepage": "https://j-brooke.github.io/FracturedJson/",
    "license": "MIT",
    "icon": "images/logo_256.png",
    "activationEvents": [
        "onCommand:fracturedjsonvsc.formatJsonDocument",
        "onCommand:fracturedjsonvsc.formatJsonSelection",
        "onCommand:fracturedjsonvsc.minifyJsonDocument",
        "onCommand:fracturedjsonvsc.nearMinifyJsonDocument",
        "onLanguage:json",
        "onLanguage:jsonc"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "fracturedjsonvsc.formatJsonDocument",
                "title": "Format JSON Document"
            },
            {
                "command": "fracturedjsonvsc.formatJsonSelection",
                "title": "Format JSON Selection"
            },
            {
                "command": "fracturedjsonvsc.minifyJsonDocument",
                "title": "Minify JSON Document"
            },
            {
                "command": "fracturedjsonvsc.nearMinifyJsonDocument",
                "title": "Near-minify JSON Document"
            }
        ],
        "configuration": {
            "title": "FracturedJson",
            "properties": {
                "fracturedjsonvsc.MaxInlineLength": {
                    "type": "number",
                    "default": 80,
                    "description": "Maximum length of complex inline elements, not counting indentation."
                },
                "fracturedjsonvsc.MaxInlineComplexity": {
                    "type": "number",
                    "default": 2,
                    "description": "Maximum complexity for inline elements."
                },
                "fracturedjsonvsc.MaxCompactArrayComplexity": {
                    "type": "number",
                    "default": 1,
                    "description": "Maximum complexity for compact multiline arrays."
                },
                "fracturedjsonvsc.MaxTableRowComplexity": {
                    "type": "number",
                    "default": 2,
                    "description": "Maximum nesting level allowed as a row of a table-formatted array/object."
                },
                "fracturedjsonvsc.NestedBracketPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces inside brackets for complex inlined types."
                },
                "fracturedjsonvsc.SimpleBracketPadding": {
                    "type": "boolean",
                    "default": false,
                    "description": "Insert spaces inside brackets for un-nested inlined types."
                },
                "fracturedjsonvsc.ColonPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces after colons."
                },
                "fracturedjsonvsc.CommaPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces after commas."
                },
                "fracturedjsonvsc.JustifyNumberLists": {
                    "type": "boolean",
                    "default": false,
                    "description": "Right-align and pad lists of only numbers."
                },
                "fracturedjsonvsc.AlwaysExpandDepth": {
                    "type": "number",
                    "default": -1,
                    "description": "Depth at which lists/objects are always expanded regardless of other settings."
                },
                "fracturedjsonvsc.TableObjectMinimumSimilarity": {
                    "type": "number",
                    "default": 75,
                    "description": "Value from 0 to 100 indicating how similar collections of inline objects need to be to be formatted as a table.  Setting this to a value >100 disables table formatting with objects as rows."
                },
                "fracturedjsonvsc.TableArrayMinimumSimilarity": {
                    "type": "number",
                    "default": 75,
                    "description": "Value from 0 to 100 indicating how similar collections of inline arrays need to be to be formatted as a table.  Setting this to a value >100 disables table formatting with arrays as rows."
                },
                "fracturedjsonvsc.AlignExpandedPropertyNames": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, property names of expanded objects are padded to the same size."
                },
                "fracturedjsonvsc.DontJustifyNumbers": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, numbers won't be right-aligned with matching precision."
                },
                "fracturedjsonvsc.StringWidthPolicy": {
                    "type": "string",
                    "default": "EastAsianFullWidth",
                    "description": "Determines how many spaces are added when aligning things as tables.",
                    "enum": [
                        "CharacterCount",
                        "EastAsianFullWidth"
                    ],
                    "enumDescriptions": [
                        "Aligns tables based on simple character counts.",
                        "Aligns tables adjusting for unicode FullWidth characters."
                    ]
                }
            }
        }
    },
    "scripts": {
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js",
        "vscode:prepublish": "npm run -S esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
        "esbuild": "npm run -S esbuild-base -- --sourcemap",
        "esbuild-watch": "npm run -S esbuild-base -- --sourcemap --watch",
        "test-compile": "tsc -p ./"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/mocha": "^8.2.2",
        "@types/node": "14.x",
        "@types/vscode": "^1.57.0",
        "@typescript-eslint/eslint-plugin": "^4.26.0",
        "@typescript-eslint/parser": "^4.26.0",
        "esbuild": "^0.12.15",
        "eslint": "^7.27.0",
        "glob": "^7.1.7",
        "mocha": "^10.1.0",
        "typescript": "^4.3.2",
        "vscode-test": "^1.5.2"
    },
    "dependencies": {
        "eastasianwidth": "^0.2.0",
        "fracturedjsonjs": "^3.0.0",
        "vsce": "^2.13.0"
    }
}
